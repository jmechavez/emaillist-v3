// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package postgres

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, department, first_name, last_name, suffix, email, email_status,
  account_status, user_type, ticket_no, profile_picture, hashed_password,
  smtp_email, smtp_password, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateUserParams struct {
	ID             string
	Department     string
	FirstName      string
	LastName       string
	Suffix         sql.NullString
	Email          string
	EmailStatus    EmailStatus
	AccountStatus  UserStatus
	UserType       UserType
	TicketNo       sql.NullString
	ProfilePicture sql.NullString
	HashedPassword string
	SmtpEmail      sql.NullString
	SmtpPassword   sql.NullString
	CreatedBy      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Department,
		arg.FirstName,
		arg.LastName,
		arg.Suffix,
		arg.Email,
		arg.EmailStatus,
		arg.AccountStatus,
		arg.UserType,
		arg.TicketNo,
		arg.ProfilePicture,
		arg.HashedPassword,
		arg.SmtpEmail,
		arg.SmtpPassword,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.FirstName,
		&i.LastName,
		&i.Suffix,
		&i.Email,
		&i.EmailStatus,
		&i.AccountStatus,
		&i.UserType,
		&i.TicketNo,
		&i.UpdatedTicketNo,
		&i.DeletedTicketNo,
		&i.ProfilePicture,
		&i.HashedPassword,
		&i.SmtpEmail,
		&i.SmtpPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM users WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.FirstName,
		&i.LastName,
		&i.Suffix,
		&i.Email,
		&i.EmailStatus,
		&i.AccountStatus,
		&i.UserType,
		&i.TicketNo,
		&i.UpdatedTicketNo,
		&i.DeletedTicketNo,
		&i.ProfilePicture,
		&i.HashedPassword,
		&i.SmtpEmail,
		&i.SmtpPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM users WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.FirstName,
		&i.LastName,
		&i.Suffix,
		&i.Email,
		&i.EmailStatus,
		&i.AccountStatus,
		&i.UserType,
		&i.TicketNo,
		&i.UpdatedTicketNo,
		&i.DeletedTicketNo,
		&i.ProfilePicture,
		&i.HashedPassword,
		&i.SmtpEmail,
		&i.SmtpPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM users WHERE account_status = 'active' AND deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListActiveUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Department,
			&i.FirstName,
			&i.LastName,
			&i.Suffix,
			&i.Email,
			&i.EmailStatus,
			&i.AccountStatus,
			&i.UserType,
			&i.TicketNo,
			&i.UpdatedTicketNo,
			&i.DeletedTicketNo,
			&i.ProfilePicture,
			&i.HashedPassword,
			&i.SmtpEmail,
			&i.SmtpPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM users WHERE deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Department,
			&i.FirstName,
			&i.LastName,
			&i.Suffix,
			&i.Email,
			&i.EmailStatus,
			&i.AccountStatus,
			&i.UserType,
			&i.TicketNo,
			&i.UpdatedTicketNo,
			&i.DeletedTicketNo,
			&i.ProfilePicture,
			&i.HashedPassword,
			&i.SmtpEmail,
			&i.SmtpPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByDepartment = `-- name: ListUsersByDepartment :many
SELECT id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM users WHERE department = $1 AND deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListUsersByDepartment(ctx context.Context, department string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByDepartment, department)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Department,
			&i.FirstName,
			&i.LastName,
			&i.Suffix,
			&i.Email,
			&i.EmailStatus,
			&i.AccountStatus,
			&i.UserType,
			&i.TicketNo,
			&i.UpdatedTicketNo,
			&i.DeletedTicketNo,
			&i.ProfilePicture,
			&i.HashedPassword,
			&i.SmtpEmail,
			&i.SmtpPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET
  deleted_at = now(),
  deleted_by = $2,
  deleted_ticket_no = $3
WHERE id = $1 AND deleted_at IS NULL
`

type SoftDeleteUserParams struct {
	ID              string
	DeletedBy       sql.NullString
	DeletedTicketNo sql.NullString
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, arg.ID, arg.DeletedBy, arg.DeletedTicketNo)
	return err
}

const updateEmailStatus = `-- name: UpdateEmailStatus :exec
UPDATE users SET
  email_status = $2,
  updated_at = now(),
  updated_by = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateEmailStatusParams struct {
	ID          string
	EmailStatus EmailStatus
	UpdatedBy   sql.NullString
}

func (q *Queries) UpdateEmailStatus(ctx context.Context, arg UpdateEmailStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailStatus, arg.ID, arg.EmailStatus, arg.UpdatedBy)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
  department = $2,
  first_name = $3,
  last_name = $4,
  suffix = $5,
  email = $6,
  email_status = $7,
  account_status = $8,
  user_type = $9,
  updated_ticket_no = $10,
  profile_picture = $11,
  smtp_email = $12,
  smtp_password = $13,
  updated_at = now(),
  updated_by = $14
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, department, first_name, last_name, suffix, email, email_status, account_status, user_type, ticket_no, updated_ticket_no, deleted_ticket_no, profile_picture, hashed_password, smtp_email, smtp_password, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateUserParams struct {
	ID              string
	Department      string
	FirstName       string
	LastName        string
	Suffix          sql.NullString
	Email           string
	EmailStatus     EmailStatus
	AccountStatus   UserStatus
	UserType        UserType
	UpdatedTicketNo sql.NullString
	ProfilePicture  sql.NullString
	SmtpEmail       sql.NullString
	SmtpPassword    sql.NullString
	UpdatedBy       sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Department,
		arg.FirstName,
		arg.LastName,
		arg.Suffix,
		arg.Email,
		arg.EmailStatus,
		arg.AccountStatus,
		arg.UserType,
		arg.UpdatedTicketNo,
		arg.ProfilePicture,
		arg.SmtpEmail,
		arg.SmtpPassword,
		arg.UpdatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.FirstName,
		&i.LastName,
		&i.Suffix,
		&i.Email,
		&i.EmailStatus,
		&i.AccountStatus,
		&i.UserType,
		&i.TicketNo,
		&i.UpdatedTicketNo,
		&i.DeletedTicketNo,
		&i.ProfilePicture,
		&i.HashedPassword,
		&i.SmtpEmail,
		&i.SmtpPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET
  hashed_password = $2,
  updated_at = now(),
  updated_by = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID             string
	HashedPassword string
	UpdatedBy      sql.NullString
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword, arg.UpdatedBy)
	return err
}
