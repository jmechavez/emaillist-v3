// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package postgres

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type EmailStatus string

const (
	EmailStatusPending  EmailStatus = "pending"
	EmailStatusApproved EmailStatus = "approved"
	EmailStatusRejected EmailStatus = "rejected"
	EmailStatusCreated  EmailStatus = "created"
)

func (e *EmailStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmailStatus(s)
	case string:
		*e = EmailStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EmailStatus: %T", src)
	}
	return nil
}

type NullEmailStatus struct {
	EmailStatus EmailStatus
	Valid       bool // Valid is true if EmailStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmailStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EmailStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmailStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmailStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmailStatus), nil
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
	UserStatusDeleted  UserStatus = "deleted"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type UserType string

const (
	UserTypeAdmin   UserType = "admin"
	UserTypeRegular UserType = "regular"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type User struct {
	ID              string
	Department      string
	FirstName       string
	LastName        string
	Suffix          sql.NullString
	Email           string
	EmailStatus     EmailStatus
	AccountStatus   UserStatus
	UserType        UserType
	TicketNo        sql.NullString
	UpdatedTicketNo sql.NullString
	DeletedTicketNo sql.NullString
	ProfilePicture  sql.NullString
	HashedPassword  string
	SmtpEmail       sql.NullString
	SmtpPassword    sql.NullString
	CreatedAt       time.Time
	UpdatedAt       time.Time
	DeletedAt       sql.NullTime
	CreatedBy       sql.NullString
	UpdatedBy       sql.NullString
	DeletedBy       sql.NullString
}
